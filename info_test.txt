NOSE2 customization options

1. Change search directory: nose2 -s DIR_ADD DIR_NAME
    DIR_NAME -> Directory in which we want to search
    DIR_ADD -> Adress of parent directory of DIR_NAME relative to the project source directory (Use "./" if directory is in project source directory)
    Usefull when wanting to test only one feature of your app at a time

2. Running specific test cases: nose2 -s DIR_ADD DIR_NAME.TEST_FILE.TEST_CLASS.TEST_NAME
    TEST_NAME -> Name of the Test method
    TEST_CLASS -> class in which the test method is defined
    TEST_FILE -> name of the test file in which the test case is defined
    DIR_NAME -> Directory in which the file exists
    DIR_ADD -> Address of the parent directory of DIR_NAME relative to the project source

3. Running tests in a single module: Can be also run by calling the function nose2.main()

PYTEST

1. pip install pytest
2. Called using py.test command in project source
3. Looks for files in all locations inside the project directory
4. Files starting with "test_" or ending with "_test" are considered test files
5. Pytest customization options
    a. Running specific files: py.test <filename>
    b. Substring matching: py.test -k "method_name"
        For example if we want to test "area()" of class "Square" method we would run py.test -k "area" and pytest woudl only execute the tests with "area" in their name
    c. Marking: In order to run a specific set of tests. The mark must be put on the test we want to run, example in test_file1.py
    d. Parallel Processing: pip install pytest-xdist. To execute tests faster, for example: "py.test -n 4"

UNITTEST

    1. Test Fixture: Baseline for running tests to ensure that there is a fixed environment in which tests are run so that results are repeatable
    2. Test Case: Set of conditions which is used to determine whether a system under test works correctly
    3. Test Suite: Collection of testcases that are used to test a software program to show what it has some specified set of behaviours by executing the aggregated tests together
    4. Test Runner: Component which set up the execution of tests and provides the outcome to the user

    Possible Outcomes:
        1. OK: Tests are passed
        2. FAIL: Test did not pass. An AssertionError exception is raised
        3. ERROR: Test raises an exception other than AssertionError
    
    Terms:
        1. assertEqual(): Check if the result is equal to the expected result
        2. assertTrue()/assertFalse(): Verify if statement is true or false
        3. assertRaises(): Raise a specific exception. Ex: self.assertRaises(TypeError)

